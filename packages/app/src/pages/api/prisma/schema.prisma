generator client {
    provider = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    relationMode = "prisma"
    extensions = [pgvector(map: "vector")]
}


enum CharDatasource {
    webpages
    file
}

enum ConversationControl {
    AI
    User
}

enum SenderType {
  ANONYMOUS
  AI
  ADMIN
}

model Users {
    id       String @id @unique // clerk user id 
    userId   String @default(uuid())
    email    String @unique
    username String
    fullname String
    image    String

    chats Chats[]
    conversation Conversations[]
    messages Messages[]
}

model Chats {
    id        String @id @unique @default(uuid())
    userId   String
    name String
    agent_name String

    datasource Datasource[]
    user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
    conversations Conversations[]

    createdAt DateTime @default(now())

    @@index([userId])
}

model Datasource {
    id       String @id @unique @default(uuid())
    type String @default("webpages")
    chatId String
    content String
    embedding  Unsupported("vector")?

    createdAt DateTime @default(now())

    chat Chats @relation(fields: [chatId], references: [id], onDelete: Cascade)
    metadata DatasourceMetaData?

    @@index([chatId])
}

model DatasourceMetaData {
    id String @id @unique @default(uuid())
    data_source_id String @unique
    metadata String? @db.Text

    createdAt DateTime @default(now())

    data_source Datasource @relation(fields: [data_source_id], references: [id], onDelete: Cascade)

    @@index([data_source_id])
}

model Messages {
    id String @id @unique @default(uuid())
    userId String?
    message String
    sender_type SenderType
    conversation_id String
    metadata String?
    createdAt DateTime @default(now())

    conversation Conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
    user Users? @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([conversation_id])
    @@index([userId])
}


// conversations are mean't to be created/started only from anonymous user
model Conversations {
    id String @id @unique @default(uuid())
    anonymous_id String
    chatId String
    userId String
    in_control ConversationControl @default(AI)

    createdAt DateTime @default(now())

    chat Chats @relation(fields: [chatId], references: [id], onDelete: Cascade)
    user Users? @relation(fields: [userId], references: [id], onDelete: Cascade)
    messages Messages[]

    @@index([chatId])
    @@index([userId])
}

// model Conversations {
//     id      String @id @unique @default(uuid())
//     chatId  String
//     userId  String?
//     in_control ConversationControl @default(AI)
//     message String


//     createdAt DateTime @default(now())

//     chat Chats @relation(fields: [chatId], references: [id], onDelete: Cascade)
//     user Users? @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@index([chatId])
//     @@index([userId])
// }

// psql -h localhost -d test_db -U root -p 5432